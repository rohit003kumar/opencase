

const SlotTemplate = require("../models/predefine.model");

// Utility function to generate next N dates
const generateNextNDates = (n, startDate = null) => {
  const dates = [];
  const start = startDate ? new Date(startDate) : new Date();
  
  for (let i = 0; i < n; i++) {
    const date = new Date(start);
    date.setDate(date.getDate() + i);
    const dateString = date.getFullYear() + '-' +
      String(date.getMonth() + 1).padStart(2, '0') + '-' +
      String(date.getDate()).padStart(2, '0');
    dates.push(dateString);
  }
  return dates;
};

// Utility function to get today's date string
const getTodayString = () => {
  const today = new Date();
  return today.getFullYear() + '-' +
    String(today.getMonth() + 1).padStart(2, '0') + '-' +
    String(today.getDate()).padStart(2, '0');
};

// POST /api/admin/slot-template - Create or update slot templates
exports.createSlotTemplate = async (req, res) => {
  try {
    const { dates, slots, autoGenerate = false } = req.body;

    // Validate input
    if (!Array.isArray(dates) || dates.length === 0) {
      return res.status(400).json({ error: "Dates are required." });
    }
    if (!Array.isArray(slots) || slots.length === 0) {
      return res.status(400).json({ error: "At least one slot is required." });
    }

    // Validate slots
    for (const slot of slots) {
      if (!slot.label || !slot.range) {
        return res.status(400).json({ error: "Each slot must have a label and range." });
      }

      const rangeRegex = /^[0-9]{2}:[0-9]{2}-[0-9]{2}:[0-9]{2}$/;
      if (!rangeRegex.test(slot.range)) {
        return res.status(400).json({ error: `Invalid range format: ${slot.range}` });
      }

      // Removed maxBookings validation since admin cannot set this value
    }

    const results = [];
    const today = getTodayString();

    // Process each date
    for (const date of dates) {
      // Skip past dates
      if (date < today) {
        results.push({ date, status: 'skipped', reason: 'Past date' });
        continue;
      }

      try {
        // Prepare slots with defaults
        const processedSlots = slots.map(slot => ({
          label: slot.label,
          range: slot.range,
          maxBookings: 10, // Always use default value, admin cannot set this
          isActive: slot.isActive !== false
        }));

        await SlotTemplate.updateOne(
          { date },
          { 
            $set: { 
              slots: processedSlots,
              isAutoGenerated: autoGenerate,
              sourceTemplate: autoGenerate ? 'manual' : null,
              updatedAt: new Date()
            } 
          },
          { upsert: true }
        );

        results.push({ date, status: 'success' });
      } catch (error) {
        results.push({ date, status: 'error', reason: error.message });
      }
    }

    res.status(200).json({ 
      message: "Slot templates processed successfully.", 
      results 
    });
  } catch (error) {
    console.error("Error creating slot templates:", error);
    res.status(500).json({ error: "Internal server error while creating slot templates." });
  }
};

// POST /api/admin/auto-generate-dates - Auto-generate dates for next 10 days
exports.autoGenerateDates = async (req, res) => {
  try {
    const { templateDate, numberOfDays = 10 } = req.body;

    if (!templateDate) {
      return res.status(400).json({ error: "Template date is required." });
    }

    // Find the template to copy from
    const template = await SlotTemplate.findOne({ date: templateDate });
    if (!template) {
      return res.status(404).json({ error: "Template not found for the specified date." });
    }

    const today = getTodayString();
    const nextDates = generateNextNDates(numberOfDays, today);
    const results = [];

    for (const date of nextDates) {
      try {
        // Check if template already exists
        const existing = await SlotTemplate.findOne({ date });
        if (existing) {
          results.push({ date, status: 'skipped', reason: 'Template already exists' });
          continue;
        }

        // Create new template based on the source template
        const newTemplate = new SlotTemplate({
          date,
          slots: template.slots.map(slot => ({
            ...slot.toObject(),
            _id: undefined // Remove the original _id
          })),
          isAutoGenerated: true,
          sourceTemplate: templateDate
        });

        await newTemplate.save();
        results.push({ date, status: 'success' });
      } catch (error) {
        results.push({ date, status: 'error', reason: error.message });
      }
    }

    res.status(200).json({ 
      message: "Dates auto-generated successfully.", 
      results 
    });
  } catch (error) {
    console.error("Error auto-generating dates:", error);
    res.status(500).json({ error: "Internal server error while auto-generating dates." });
  }
};

// PUT /api/admin/slot-template/:date - Update slot template for specific date
exports.updateSlotTemplate = async (req, res) => {
  try {
    const { date } = req.params;
    const { slots } = req.body;

    if (!Array.isArray(slots) || slots.length === 0) {
      return res.status(400).json({ error: "At least one slot is required." });
    }

    // Validate slots
    for (const slot of slots) {
      if (!slot.label || !slot.range) {
        return res.status(400).json({ error: "Each slot must have a label and range." });
      }

      const rangeRegex = /^[0-9]{2}:[0-9]{2}-[0-9]{2}:[0-9]{2}$/;
      if (!rangeRegex.test(slot.range)) {
        return res.status(400).json({ error: `Invalid range format: ${slot.range}` });
      }
    }

    const template = await SlotTemplate.findOne({ date });
    if (!template) {
      return res.status(404).json({ error: "Slot template not found." });
    }

    // Update the template
    template.slots = slots.map(slot => ({
      label: slot.label,
      range: slot.range,
      maxBookings: slot.maxBookings || 10,
      isActive: slot.isActive !== false
    }));
    template.isAutoGenerated = false;
    template.sourceTemplate = null;
    template.updatedAt = new Date();

    await template.save();

    res.status(200).json({ 
      message: "Slot template updated successfully.",
      template 
    });
  } catch (error) {
    console.error("Error updating slot template:", error);
    res.status(500).json({ error: "Internal server error while updating slot template." });
  }
};

// DELETE /api/admin/slot-template/:date - Delete slot template for specific date
exports.deleteSlotTemplateByDate = async (req, res) => {
  try {
    const { date } = req.params;

    const template = await SlotTemplate.findOne({ date });
    if (!template) {
      return res.status(404).json({ error: "Slot template not found." });
    }

    await SlotTemplate.deleteOne({ date });

    res.status(200).json({ 
      message: "Slot template deleted successfully." 
    });
  } catch (error) {
    console.error("Error deleting slot template:", error);
    res.status(500).json({ error: "Internal server error while deleting slot template." });
  }
};

// GET /api/admin/slot-templates - Get all slot templates
exports.getAllSlotTemplates = async (req, res) => {
  try {
    const templates = await SlotTemplate.find().sort({ date: 1 });
    res.status(200).json(templates);
  } catch (error) {
    console.error("Error fetching all slot templates:", error);
    res.status(500).json({ error: "Internal server error." });
  }
};

// GET /api/admin/slot-template/:date - Get specific slot template
exports.getSlotTemplateByDate = async (req, res) => {
  try {
    const { date } = req.params;

    const template = await SlotTemplate.findOne({ date });
    if (!template) {
      return res.status(404).json({ error: "Slot template not found." });
    }

    res.status(200).json(template);
  } catch (error) {
    console.error("Error fetching slot template:", error);
    res.status(500).json({ error: "Internal server error." });
  }
};

// POST /api/admin/cleanup-past-dates - Clean up past dates
exports.cleanupPastDates = async (req, res) => {
  try {
    const today = getTodayString();
    
    const result = await SlotTemplate.deleteMany({
      date: { $lt: today }
    });

    res.status(200).json({ 
      message: "Past dates cleaned up successfully.",
      deletedCount: result.deletedCount
    });
  } catch (error) {
    console.error("Error cleaning up past dates:", error);
    res.status(500).json({ error: "Internal server error while cleaning up past dates." });
  }
};

// GET /api/admin/next-available-dates - Get next available dates for auto-generation
exports.getNextAvailableDates = async (req, res) => {
  try {
    const { numberOfDays = 10 } = req.query;
    const today = getTodayString();
    const nextDates = generateNextNDates(parseInt(numberOfDays), today);

    // Check which dates already have templates
    const existingTemplates = await SlotTemplate.find({
      date: { $in: nextDates }
    });

    const existingDates = existingTemplates.map(t => t.date);
    const availableDates = nextDates.filter(date => !existingDates.includes(date));

    res.status(200).json({
      nextDates,
      existingDates,
      availableDates,
      today
    });
  } catch (error) {
    console.error("Error getting next available dates:", error);
    res.status(500).json({ error: "Internal server error." });
  }
};









