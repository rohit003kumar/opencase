const fs = require('fs');
const path = require('path');

// Create a cron job setup guide
const createCronSetup = () => {
  const cronGuide = `
# Auto-Generate Dates Cron Job Setup

## Option 1: Using crontab (Linux/Mac)

1. Open crontab for editing:
   \`\`\`bash
   crontab -e
   \`\`\`

2. Add the following line to run the script daily at 12:00 AM:
   \`\`\`
   0 0 * * * cd /path/to/your/project/Backend && npm run auto-generate-dates >> logs/auto-generate.log 2>&1
   \`\`\`

3. Or to run every 6 hours:
   \`\`\`
   0 */6 * * * cd /path/to/your/project/Backend && npm run auto-generate-dates >> logs/auto-generate.log 2>&1
   \`\`\`

## Option 2: Using Windows Task Scheduler

1. Open Task Scheduler
2. Create a new Basic Task
3. Set trigger to Daily at 12:00 AM
4. Set action to start a program
5. Program: \`node\`
6. Arguments: \`scripts/autoGenerateDates.js\`
7. Start in: \`C:\\path\\to\\your\\project\\Backend\`

## Option 3: Using PM2 (Recommended for production)

1. Install PM2 globally:
   \`\`\`bash
   npm install -g pm2
   \`\`\`

2. Create a cron job with PM2:
   \`\`\`bash
   pm2 install pm2-cron
   pm2 set pm2-cron:auto-generate-dates "0 0 * * *"
   pm2 set pm2-cron:script "npm run auto-generate-dates"
   pm2 set pm2-cron:cwd "/path/to/your/project/Backend"
   \`\`\`

## Option 4: Manual Setup with Node.js Cron

1. Install node-cron:
   \`\`\`bash
   npm install node-cron
   \`\`\`

2. Add to your main server file (index.js):
   \`\`\`javascript
   const cron = require('node-cron');
   const { autoGenerateDates } = require('./scripts/autoGenerateDates');

   // Run daily at 12:00 AM
   cron.schedule('0 0 * * *', () => {
     console.log('Running auto-generation of dates...');
     autoGenerateDates();
   });
   \`\`\`

## Testing the Script

To test the script manually:
\`\`\`bash
cd Backend
npm run auto-generate-dates
\`\`\`

## Logs

The script will create logs in the \`logs/\` directory. Make sure this directory exists:
\`\`\`bash
mkdir -p Backend/logs
\`\`\`

## Environment Variables

Make sure your .env file contains:
\`\`\`
MONGODB_URI=your_mongodb_connection_string
\`\`\`
`;

  // Create logs directory
  const logsDir = path.join(__dirname, '..', 'logs');
  if (!fs.existsSync(logsDir)) {
    fs.mkdirSync(logsDir, { recursive: true });
    console.log('Created logs directory');
  }

  // Write the guide to a file
  const guidePath = path.join(__dirname, '..', 'CRON_SETUP.md');
  fs.writeFileSync(guidePath, cronGuide);
  console.log('Cron setup guide created at:', guidePath);

  // Create a simple cron integration for the main server
  const cronIntegration = `
const cron = require('node-cron');
const { autoGenerateDates } = require('./scripts/autoGenerateDates');

// Auto-generate dates daily at 12:00 AM
const setupAutoGeneration = () => {
  cron.schedule('0 0 * * *', async () => {
    console.log('[CRON] Starting daily auto-generation of dates...');
    try {
      await autoGenerateDates();
      console.log('[CRON] Daily auto-generation completed successfully');
    } catch (error) {
      console.error('[CRON] Error in daily auto-generation:', error);
    }
  });
  
  console.log('[CRON] Auto-generation cron job scheduled for daily at 12:00 AM');
};

module.exports = { setupAutoGeneration };
`;

  const cronIntegrationPath = path.join(__dirname, '..', 'utils', 'cronSetup.js');
  const utilsDir = path.join(__dirname, '..', 'utils');
  
  if (!fs.existsSync(utilsDir)) {
    fs.mkdirSync(utilsDir, { recursive: true });
  }
  
  fs.writeFileSync(cronIntegrationPath, cronIntegration);
  console.log('Cron integration file created at:', cronIntegrationPath);

  console.log('\n=== CRON SETUP COMPLETE ===');
  console.log('1. Check CRON_SETUP.md for detailed instructions');
  console.log('2. Install node-cron: npm install node-cron');
  console.log('3. Add the cron integration to your main server file');
  console.log('4. Test with: npm run auto-generate-dates');
};

// Run the setup
createCronSetup();

