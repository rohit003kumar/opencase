const mongoose = require('mongoose');
const SlotTemplate = require('../models/predefine.model');
require('dotenv').config();

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/laundry-service', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Utility function to generate next N dates
const generateNextNDates = (n, startDate = null) => {
  const dates = [];
  const start = startDate ? new Date(startDate) : new Date();
  
  for (let i = 0; i < n; i++) {
    const date = new Date(start);
    date.setDate(date.getDate() + i);
    const dateString = date.getFullYear() + '-' +
      String(date.getMonth() + 1).padStart(2, '0') + '-' +
      String(date.getDate()).padStart(2, '0');
    dates.push(dateString);
  }
  return dates;
};

// Utility function to get today's date string
const getTodayString = () => {
  const today = new Date();
  return today.getFullYear() + '-' +
    String(today.getMonth() + 1).padStart(2, '0') + '-' +
    String(today.getDate()).padStart(2, '0');
};

// Main function to auto-generate dates
const autoGenerateDates = async () => {
  try {
    console.log('Starting auto-generation of dates...');
    
    // Get today's date
    const today = getTodayString();
    console.log('Today:', today);
    
    // Generate next 10 dates
    const nextDates = generateNextNDates(10, today);
    console.log('Next 10 dates:', nextDates);
    
    // Find the most recent template to use as a base
    const recentTemplate = await SlotTemplate.findOne({
      date: { $gte: today }
    }).sort({ date: 1 });
    
    if (!recentTemplate) {
      console.log('No recent template found. Skipping auto-generation.');
      return;
    }
    
    console.log('Using template from:', recentTemplate.date, 'as base');
    
    const results = [];
    
    for (const date of nextDates) {
      try {
        // Check if template already exists
        const existing = await SlotTemplate.findOne({ date });
        if (existing) {
          console.log(`Template for ${date} already exists, skipping...`);
          results.push({ date, status: 'skipped', reason: 'Template already exists' });
          continue;
        }
        
        // Create new template based on the source template
        const newTemplate = new SlotTemplate({
          date,
          slots: recentTemplate.slots.map(slot => ({
            ...slot.toObject(),
            _id: undefined // Remove the original _id
          })),
          isAutoGenerated: true,
          sourceTemplate: recentTemplate.date
        });
        
        await newTemplate.save();
        console.log(`Created template for ${date}`);
        results.push({ date, status: 'success' });
      } catch (error) {
        console.error(`Error creating template for ${date}:`, error.message);
        results.push({ date, status: 'error', reason: error.message });
      }
    }
    
    // Clean up past dates
    const cleanupResult = await SlotTemplate.deleteMany({
      date: { $lt: today }
    });
    
    console.log('Auto-generation completed!');
    console.log('Results:', results);
    console.log(`Cleaned up ${cleanupResult.deletedCount} past templates`);
    
    const successCount = results.filter(r => r.status === 'success').length;
    const skippedCount = results.filter(r => r.status === 'skipped').length;
    const errorCount = results.filter(r => r.status === 'error').length;
    
    console.log(`Summary: ${successCount} created, ${skippedCount} skipped, ${errorCount} errors`);
    
  } catch (error) {
    console.error('Error in auto-generation:', error);
  } finally {
    // Close the database connection
    await mongoose.connection.close();
    console.log('Database connection closed');
  }
};

// Run the script if called directly
if (require.main === module) {
  autoGenerateDates();
}

module.exports = { autoGenerateDates };

